// Code generated by MockGen. DO NOT EDIT.
// Source: collection.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/tusmasoma/go-tech-dojo/domain/model"
)

// MockCollectionRepository is a mock of CollectionRepository interface.
type MockCollectionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionRepositoryMockRecorder
}

// MockCollectionRepositoryMockRecorder is the mock recorder for MockCollectionRepository.
type MockCollectionRepositoryMockRecorder struct {
	mock *MockCollectionRepository
}

// NewMockCollectionRepository creates a new mock instance.
func NewMockCollectionRepository(ctrl *gomock.Controller) *MockCollectionRepository {
	mock := &MockCollectionRepository{ctrl: ctrl}
	mock.recorder = &MockCollectionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionRepository) EXPECT() *MockCollectionRepositoryMockRecorder {
	return m.recorder
}

// BatchCreate mocks base method.
func (m *MockCollectionRepository) BatchCreate(ctx context.Context, collections model.Collections) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreate", ctx, collections)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreate indicates an expected call of BatchCreate.
func (mr *MockCollectionRepositoryMockRecorder) BatchCreate(ctx, collections interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreate", reflect.TypeOf((*MockCollectionRepository)(nil).BatchCreate), ctx, collections)
}

// Create mocks base method.
func (m *MockCollectionRepository) Create(ctx context.Context, collection model.Collection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, collection)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCollectionRepositoryMockRecorder) Create(ctx, collection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCollectionRepository)(nil).Create), ctx, collection)
}

// Delete mocks base method.
func (m *MockCollectionRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCollectionRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCollectionRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockCollectionRepository) Get(ctx context.Context, id string) (*model.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCollectionRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCollectionRepository)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockCollectionRepository) List(ctx context.Context) (model.Collections, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(model.Collections)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCollectionRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCollectionRepository)(nil).List), ctx)
}

// Update mocks base method.
func (m *MockCollectionRepository) Update(ctx context.Context, collection model.Collection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, collection)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCollectionRepositoryMockRecorder) Update(ctx, collection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCollectionRepository)(nil).Update), ctx, collection)
}

// MockCollectionCacheRepository is a mock of CollectionCacheRepository interface.
type MockCollectionCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionCacheRepositoryMockRecorder
}

// MockCollectionCacheRepositoryMockRecorder is the mock recorder for MockCollectionCacheRepository.
type MockCollectionCacheRepositoryMockRecorder struct {
	mock *MockCollectionCacheRepository
}

// NewMockCollectionCacheRepository creates a new mock instance.
func NewMockCollectionCacheRepository(ctrl *gomock.Controller) *MockCollectionCacheRepository {
	mock := &MockCollectionCacheRepository{ctrl: ctrl}
	mock.recorder = &MockCollectionCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionCacheRepository) EXPECT() *MockCollectionCacheRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCollectionCacheRepository) Create(ctx context.Context, key string, collection model.Collections) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, key, collection)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCollectionCacheRepositoryMockRecorder) Create(ctx, key, collection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCollectionCacheRepository)(nil).Create), ctx, key, collection)
}

// Delete mocks base method.
func (m *MockCollectionCacheRepository) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCollectionCacheRepositoryMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCollectionCacheRepository)(nil).Delete), ctx, key)
}

// Get mocks base method.
func (m *MockCollectionCacheRepository) Get(ctx context.Context, key string) (model.Collections, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(model.Collections)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCollectionCacheRepositoryMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCollectionCacheRepository)(nil).Get), ctx, key)
}
