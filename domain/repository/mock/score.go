// Code generated by MockGen. DO NOT EDIT.
// Source: score.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/tusmasoma/go-tech-dojo/domain/model"
)

// MockScoreRepository is a mock of ScoreRepository interface.
type MockScoreRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScoreRepositoryMockRecorder
}

// MockScoreRepositoryMockRecorder is the mock recorder for MockScoreRepository.
type MockScoreRepositoryMockRecorder struct {
	mock *MockScoreRepository
}

// NewMockScoreRepository creates a new mock instance.
func NewMockScoreRepository(ctrl *gomock.Controller) *MockScoreRepository {
	mock := &MockScoreRepository{ctrl: ctrl}
	mock.recorder = &MockScoreRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoreRepository) EXPECT() *MockScoreRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockScoreRepository) Create(ctx context.Context, score model.Score) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, score)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockScoreRepositoryMockRecorder) Create(ctx, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScoreRepository)(nil).Create), ctx, score)
}
