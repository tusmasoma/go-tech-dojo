// Code generated by MockGen. DO NOT EDIT.
// Source: user_collection.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/tusmasoma/go-tech-dojo/domain/model"
)

// MockUserCollectionRepository is a mock of UserCollectionRepository interface.
type MockUserCollectionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserCollectionRepositoryMockRecorder
}

// MockUserCollectionRepositoryMockRecorder is the mock recorder for MockUserCollectionRepository.
type MockUserCollectionRepositoryMockRecorder struct {
	mock *MockUserCollectionRepository
}

// NewMockUserCollectionRepository creates a new mock instance.
func NewMockUserCollectionRepository(ctrl *gomock.Controller) *MockUserCollectionRepository {
	mock := &MockUserCollectionRepository{ctrl: ctrl}
	mock.recorder = &MockUserCollectionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCollectionRepository) EXPECT() *MockUserCollectionRepositoryMockRecorder {
	return m.recorder
}

// BatchCreate mocks base method.
func (m *MockUserCollectionRepository) BatchCreate(ctx context.Context, userCollections []*model.UserCollection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreate", ctx, userCollections)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreate indicates an expected call of BatchCreate.
func (mr *MockUserCollectionRepositoryMockRecorder) BatchCreate(ctx, userCollections interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreate", reflect.TypeOf((*MockUserCollectionRepository)(nil).BatchCreate), ctx, userCollections)
}

// Create mocks base method.
func (m *MockUserCollectionRepository) Create(ctx context.Context, userCollection model.UserCollection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userCollection)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserCollectionRepositoryMockRecorder) Create(ctx, userCollection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserCollectionRepository)(nil).Create), ctx, userCollection)
}

// Delete mocks base method.
func (m *MockUserCollectionRepository) Delete(ctx context.Context, userID, collectionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID, collectionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserCollectionRepositoryMockRecorder) Delete(ctx, userID, collectionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserCollectionRepository)(nil).Delete), ctx, userID, collectionID)
}

// Get mocks base method.
func (m *MockUserCollectionRepository) Get(ctx context.Context, userID, collectionID string) (*model.UserCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID, collectionID)
	ret0, _ := ret[0].(*model.UserCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserCollectionRepositoryMockRecorder) Get(ctx, userID, collectionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserCollectionRepository)(nil).Get), ctx, userID, collectionID)
}

// List mocks base method.
func (m *MockUserCollectionRepository) List(ctx context.Context, userID string) ([]*model.UserCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, userID)
	ret0, _ := ret[0].([]*model.UserCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserCollectionRepositoryMockRecorder) List(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserCollectionRepository)(nil).List), ctx, userID)
}
